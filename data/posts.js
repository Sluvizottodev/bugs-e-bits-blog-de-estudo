export const posts = [
    {
        id: 1,
        titulo: "Introdu√ß√£o ao React: Fundamentos e Primeiros Passos",
        resumo: "Uma introdu√ß√£o pr√°tica ao React: JSX, componentes, estado e como montar sua primeira aplica√ß√£o passo a passo.",
        conteudo: `React mudou a forma como pensamos interfaces. Neste post eu guio voc√™ pelos conceitos essenciais para come√ßar com confian√ßa: o que √© JSX, a diferen√ßa entre componentes de fun√ß√£o e de classe, como funciona o fluxo de dados com props e state, e por que o conceito de "composi√ß√£o" √© t√£o poderoso.

Come√ßamos montando uma pequena aplica√ß√£o Todo: criar componentes simples, passar dados por props e manipular estado local. Em seguida explico hooks fundamentais (useState, useEffect) e mostro situa√ß√µes pr√°ticas para cada um. Tamb√©m comento boas pr√°ticas de estrutura de pastas, reutiliza√ß√£o de componentes e como pensar testabilidade desde o in√≠cio.

Dicas r√°pidas de produtividade: use devtools do React, divida a UI em componentes pequenos, escreva testes unit√°rios para l√≥gica importante e adote lint/formatters para manter o c√≥digo consistente. No final proponho exerc√≠cios: criar um formul√°rio controlado, consumir uma API p√∫blica e levantar estados de loading/erro.

Se voc√™ est√° come√ßando, foque em entender o pensamento reativo e praticar muito pequenos componentes. Se j√° tem familiaridade, experimente hooks customizados e patterns de composi√ß√£o para elevar seu c√≥digo.`,
        dataCriacao: "2024-03-15T10:30:00",
        categoria: "frontend",
        tags: ["react", "javascript", "frontend"],
        destaque: false,
        tempoLeitura: "7 min",
        imagem: "assets/images/react-intro.jpg"
    },
    {
        id: 12,
        titulo: "SOLID: Os 5 Princ√≠pios Essenciais da Programa√ß√£o Orientada a Objetos",
        resumo: "Entenda os 5 princ√≠pios SOLID (SRP, OCP, LSP, ISP e DIP) e como eles ajudam a criar sistemas mais flex√≠veis, escal√°veis e f√°ceis de manter.",
        conteudo: `Os princ√≠pios **SOLID** foram popularizados por Robert C. Martin (Uncle Bob) e s√£o um guia pr√°tico para escrever c√≥digo orientado a objetos mais limpo e sustent√°vel. Eles n√£o s√£o regras fixas, mas boas pr√°ticas que evitam acoplamento excessivo e aumentam a reutiliza√ß√£o de c√≥digo.

# 1. Single Responsibility Principle (SRP)
Cada classe deve ter apenas **uma responsabilidade**.  
Isso reduz a complexidade, facilita testes e manuten√ß√£o.

Exemplo:
Uma classe que manipula dados **e** gera relat√≥rios viola o SRP. O ideal √© separar: uma classe para persist√™ncia e outra para relat√≥rios.

---

# 2. Open-Closed Principle (OCP)
**Aberto para extens√£o, fechado para modifica√ß√£o.**  
Voc√™ deve adicionar novos comportamentos sem alterar c√≥digo existente, apenas estendendo.

Exemplo:
Evite \`if/else\` para cada tipo de cliente. Use polimorfismo com interfaces, criando uma classe de desconto por tipo de cliente.

---

# 3. Liskov Substitution Principle (LSP)
Objetos de subclasses devem poder substituir objetos da superclasse **sem quebrar o c√≥digo**.  
Se a subclasse n√£o mant√©m o contrato da classe pai, voc√™ est√° violando o LSP.

Analogia:  
Um \`Pinguim\` n√£o deveria herdar de \`Pato\` se o m√©todo \`voar()\` existe. Pinguins n√£o voam, logo a substitui√ß√£o quebra o sistema.

---

# 4. Interface Segregation Principle (ISP)
√â melhor ter **interfaces pequenas e espec√≠ficas** do que uma √∫nica interface gen√©rica com m√©todos que nem todos usar√£o.

‚û°Ô∏è Exemplo:
Uma interface \`IPrinter\` com \`print()\`, \`scan()\` e \`fax()\` for√ßa quem s√≥ imprime a implementar m√©todos in√∫teis. Melhor dividir em \`IPrint\`, \`IScan\`, \`IFax\`.

---

# 5. Dependency Inversion Principle (DIP)
M√≥dulos de alto n√≠vel n√£o devem depender de m√≥dulos de baixo n√≠vel, mas de **abstra√ß√µes**.  
Detalhes devem depender de abstra√ß√µes, n√£o o contr√°rio.

Exemplo:
Em vez de \`NotificationManager\` depender diretamente de \`EmailService\`, ele depende da interface \`MessageService\`. Assim voc√™ pode trocar email por SMS sem alterar a regra de neg√≥cio.

---

üéØ **Por que aplicar SOLID?**
- C√≥digo mais f√°cil de **manter**
- Maior **reuso** de componentes
- Redu√ß√£o de **acoplamento**
- Facilita **testes unit√°rios**
- Evolui o sistema sem quebrar o que j√° funciona

**Conclus√£o:**  
Adotar SOLID n√£o √© burocracia. √â uma forma de manter seu c√≥digo vivo, adapt√°vel e pronto para crescer com seguran√ßa e qualidade.`,
        dataCriacao: "2025-09-21T22:00:00",
        categoria: "software",
        tags: ["solid", "clean code", "oop", "arquitetura"],
        destaque: true,
        tempoLeitura: "5 min",
        imagem: "https://media.licdn.com/dms/image/v2/C4E12AQF-JdyljjT5hQ/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1624732062442?e=2147483647&v=beta&t=q9_rfu_ozrb1P854-G7cab4tQeS-9oSQ2Yyx4drUBdQ"
    },
    {
        id: 3,
        titulo: "Modelos de Software: Do Cascata ao √Ågil, Qual Usar?",
        resumo: "Um guia pelos principais modelos de processo de software: Cascata, Prototipa√ß√£o, Espiral, RUP e √Ågil. Explica√ß√µes pr√°ticas, compara√ß√µes e dicas para escolher o melhor para seu projeto.",
        conteudo: `Se voc√™ j√° se perguntou como os times de desenvolvimento organizam seu trabalho para construir software, a resposta est√° nos **modelos de processo**. Eles s√£o como receitas de bolo: cada um tem seu jeito de misturar os ingredientes (requisitos, c√≥digo, testes) e assar (entregar) o produto final. Vamos mergulhar nos principais!  

# 1. üíß Modelo Cascata (Waterfall)
O cl√°ssico! Linear e sequencial: primeiro requisitos, depois design, codifica√ß√£o, testes e s√≥ ent√£o entrega. N√£o volta atr√°s.  
- **Como funciona:** Parece uma escada: voc√™ s√≥ sobe um degrau depois de terminar o anterior.  
- **Exemplo pr√°tico:** Construir um pr√©dio. N√£o se levanta paredes sem a planta aprovada.  
- **Melhor para:** Projetos com requisitos muito claros e est√°veis (ex.: sistema de contabilidade).  
- **Desvantagem:** Mudan√ßas no meio do processo geram retrabalho caro.  

---

# 2. üé® Prototipa√ß√£o
A ideia √© criar um rascunho r√°pido do software para validar ideias antes do desenvolvimento completo.  
- **Como funciona:** Ciclos r√°pidos de feedback: mostra-se uma vers√£o simples, o cliente comenta e voc√™ refina.  
- **Exemplo pr√°tico:** Desenhar a interface de um app em papel ou ferramenta de design antes de codificar.  
- **Melhor para:** Quando n√£o h√° clareza sobre como o sistema deve ser.  
- **Cuidado:** O cliente pode confundir prot√≥tipo com vers√£o final.  

---

# 3. üîÑ Modelo Espiral
Iterativo e focado em riscos. Cada volta do ‚Äúcaracol‚Äù passa por: planejamento, an√°lise de riscos, desenvolvimento e avalia√ß√£o.  
- **Como funciona:** A cada ciclo, entrega-se uma vers√£o mais completa, sempre avaliando riscos (t√©cnicos, prazo, custo).  
- **Exemplo pr√°tico:** Carro el√©trico aut√¥nomo. Primeiro anda em linha reta (ciclo 1), depois detecta obst√°culos (ciclo 2), depois navega em cidade (ciclo 3)...  
- **Melhor para:** Projetos grandes, complexos e de alto risco (ex.: software aeroespacial).  
- **Desvantagem:** Complexo de gerenciar, exige muita experi√™ncia.  

---

# 4. üß© RUP (Rational Unified Process)
Iterativo, mas estruturado em fases (Concep√ß√£o, Elabora√ß√£o, Constru√ß√£o, Transi√ß√£o) e disciplinas (Requisitos, Projeto, etc.). √â como ter um mapa detalhado para a viagem.  
- **Como funciona:** Baseado em casos de uso e arquitetura. Cada itera√ß√£o percorre v√°rias disciplinas.  
- **Exemplo pr√°tico:** Sistema ERP para uma grande empresa, que exige arquitetura robusta desde o in√≠cio.  
- **Melhor para:** Projetos grandes, com alta necessidade de qualidade e documenta√ß√£o.  
- **Desvantagem:** Pode ser pesado e burocr√°tico para times pequenos.  

---

# 5. ‚ö° √Ågil (e Scrum)
A estrela do s√©culo XXI! O **Manifesto √Ågil** valoriza:  
- Indiv√≠duos e intera√ß√µes sobre processos e ferramentas.  
- Software em funcionamento sobre documenta√ß√£o extensa.  
- Colabora√ß√£o com o cliente sobre negocia√ß√£o de contratos.  
- Responder a mudan√ßas sobre seguir um plano.  

O *Scrum* √© o framework mais popular:  
- Trabalho dividido em **Sprints** (2-4 semanas).  
- No in√≠cio: sele√ß√£o do **Product Backlog** (lista priorizada).  
- Todo dia: reuni√£o r√°pida de 15min (**Daily Scrum**).  
- No fim: entrega de vers√£o funcional + retrospectiva.  

- **Como funciona:** Times pequenos, auto-organizados, com pap√©is (Product Owner, Scrum Master, Dev Team), artefatos (Backlog, Sprint) e cerim√¥nias (Planning, Daily, Review, Retro).  
- **Exemplo pr√°tico:** App de delivery. Cada Sprint entrega algo novo: cadastro de usu√°rios, card√°pio, carrinho, pagamento...  
- **Melhor para:** Startups, produtos inovadores e requisitos vol√°teis.  
- **Desvantagem:** Sem boa facilita√ß√£o, pode virar correria.  

---

## Como Escolher?
- **Cascata:** Requisitos est√°veis e previs√≠veis.  
- **Prototipa√ß√£o:** Quando h√° incerteza e necessidade de valida√ß√£o.  
- **Espiral:** Projetos cr√≠ticos e cheios de riscos.  
- **RUP:** Grandes projetos, com arquitetura e documenta√ß√£o fortes.  
- **√Ågil/Scrum:** Ambientes din√¢micos, que exigem velocidade e adapta√ß√£o.  

üöÄ **Conclus√£o:** N√£o existe modelo √∫nico. O segredo est√° em adaptar e, muitas vezes, misturar ideias. O importante √© entregar valor de forma consistente.`,
        dataCriacao: "2025-09-18T12:00:00",
        categoria: "software",
        tags: ["modelos", "√°gil", "scrum", "processo", "desenvolvimento"],
        destaque: true,
        tempoLeitura: "8 min",
        imagem: "https://www.levty.com/blog/assets/post/diferencas-entre-metodologias-6581a07ae8bea1272c256c57/scrum-levty.webp"
    },
    {
        "id": 4,
        "titulo": "Carreira em TI: Conex√µes que impulsionam",
        "resumo": "Mais do que habilidades t√©cnicas, participar de comunidades e eventos pode abrir portas e acelerar sua carreira em tecnologia.",
        "conteudo": "Na √°rea de TI, n√£o √© s√≥ sobre saber programar bem ou ter um portf√≥lio cheio de projetos. As conex√µes que voc√™ cria tamb√©m fazem diferen√ßa. Participar de eventos, meetups e comunidades online coloca voc√™ em contato direto com pessoas que j√° est√£o vivendo aquilo que voc√™ busca.\n\nNetworking em TI n√£o √© apenas trocar cart√µes ou adicionar no LinkedIn. √â aprender com hist√≥rias reais, descobrir ferramentas novas, entender tend√™ncias do mercado e at√© encontrar oportunidades de trabalho. Muitas vezes, aquela conversa r√°pida no caf√© de um evento pode virar uma parceria ou at√© o convite para uma entrevista.\n\nEstar presente em comunidades tamb√©m ajuda a evoluir como profissional. Voc√™ pode tirar d√∫vidas, compartilhar o que aprendeu e at√© contribuir com projetos open source. Esse tipo de envolvimento mostra iniciativa e colabora√ß√£o, duas qualidades muito valorizadas pelas empresas.\n\nO caminho √© simples: escolha um evento ou meetup da sua √°rea, participe com aten√ß√£o e esteja aberto a conversar. Leve perguntas, compartilhe suas experi√™ncias e n√£o tenha medo de interagir. No fim das contas, crescer em TI √© tanto sobre c√≥digo quanto sobre pessoas.",
        "dataCriacao": "2024-03-01T16:45:00",
        "categoria": "career",
        "tags": ["carreira", "networking", "comunidade", "eventos"],
        "destaque": false,
        "tempoLeitura": "10 min",
        "imagem": "assets/images/career-networking.jpg"
    },
    {
        id: 5,
        titulo: "CSS Grid vs Flexbox: Quando Usar Cada Um",
        resumo: "Compara√ß√£o pr√°tica entre Grid e Flexbox com exemplos de layout responsivo e padr√µes de uso recomendados.",
        conteudo: `Grid e Flexbox s√£o ferramentas complementares, n√£o rivais. Flexbox resolve muito bem layouts em linha ou coluna (componentes, barras, cards), enquanto Grid brilha em layouts bidimensionais (grades complexas, √°reas definidas). Aqui eu trago casos de uso claros: quando usar Flexbox para alinhar itens em uma barra de navega√ß√£o; quando usar Grid para montar um layout de p√°gina com header, sidebar e conte√∫do principal.

Incluo exemplos pr√°ticos de c√≥digo, t√©cnicas para responsividade (media queries, fr/auto/minmax) e como combinar os dois para obter flexibilidade m√°xima. Tamb√©m discuto acessibilidade visual e ordem visual vs ordem DOM ‚Äî importante para leitores de tela e SEO.

Conselho de estilo: prefira solu√ß√µes simples, com componentes reutiliz√°veis, e teste em diversas resolu√ß√µes. Como exerc√≠cio, reconstruir um layout complexo usando Grid e depois refatorar partes com Flexbox para entender trade-offs.`,
        dataCriacao: "2024-02-28T11:20:00",
        categoria: "frontend",
        tags: ["css", "grid", "flexbox"],
        destaque: false,
        tempoLeitura: "9 min",
        imagem: "assets/images/css-grid-flexbox.jpg"
    },
    {
        "id": 6,
        "titulo": "Node.js e Express: Criando APIs que fazem sentido",
        "resumo": "O que √© uma API, como o Express ajuda a organizar tudo e por que o Postman √© um √≥timo parceiro nos testes.",
        "conteudo": "Quando a gente fala de API, na pr√°tica estamos falando de uma ponte: de um lado temos o cliente (pode ser um app, um site, at√© outro servi√ßo), e do outro lado temos os dados. O Node.js brilha nesse cen√°rio porque trabalha de forma ass√≠ncrona e n√£o fica travado esperando uma resposta. Isso faz com que ele aguente muitas requisi√ß√µes ao mesmo tempo.\n\nO Express entra como um facilitador. Ele ajuda a organizar as rotas (por exemplo: /livros, /autores, /editoras), tratar requisi√ß√µes e dar respostas estruturadas em JSON. Com ele d√° para usar middlewares que cuidam de valida√ß√µes, autentica√ß√£o ou at√© logs sem poluir o c√≥digo principal.\n\nNo curso da Alura, a API que criamos √© de uma livraria. Parece simples, mas j√° d√° para entender bem como o mundo real vira c√≥digo. A gente define modelos (como vai ser um livro no banco de dados), cria controladores (as fun√ß√µes que realmente fazem a l√≥gica) e conecta tudo ao MongoDB. O Mongo √© um banco NoSQL que guarda os dados em formato parecido com JSON, o que combina muito bem com o Node.\n\nExemplo de uma estrutura mais organizada com Express:\n\n```js\n// server.js\nimport express from 'express';\nimport livrosRoutes from './routes/livrosRoutes.js';\n\nconst app = express();\napp.use(express.json());\n\napp.use('/livros', livrosRoutes);\n\napp.listen(3000, () => {\n  console.log('API rodando em http://localhost:3000');\n});\n```\n\n```js\n// routes/livrosRoutes.js\nimport express from 'express';\nimport { listarLivros, criarLivro } from '../controllers/livrosController.js';\n\nconst router = express.Router();\n\nrouter.get('/', listarLivros);\nrouter.post('/', criarLivro);\n\nexport default router;\n```\n\n```js\n// controllers/livrosController.js\nexport const listarLivros = (req, res) => {\n  res.status(200).json({ mensagem: 'Lista de livros' });\n};\n\nexport const criarLivro = (req, res) => {\n  const novoLivro = req.body;\n  res.status(201).json({ mensagem: 'Livro criado com sucesso', livro: novoLivro });\n};\n```\n\nE claro, nada de criar uma API sem testar. O Postman √© √≥timo para simular requisi√ß√µes, verificar respostas e at√© criar cole√ß√µes de testes autom√°ticos. Ele √© quase um companheiro obrigat√≥rio nesse processo.\n\nO legal √© perceber que por tr√°s de cada rota tem uma estrutura organizada: rotas recebem a requisi√ß√£o, controladores processam, modelos interagem com o banco e a resposta volta para o cliente. √â como montar uma linha de produ√ß√£o, cada pe√ßa tem sua fun√ß√£o.\n\nSe voc√™ est√° come√ßando agora, uma dica pr√°tica √©: crie uma API simples, tipo de cadastro de tarefas ou de filmes favoritos. Use o Express para organizar as rotas, conecte no MongoDB e brinque bastante com o Postman. Aos poucos d√° para ir adicionando camadas como autentica√ß√£o JWT, pagina√ß√£o de resultados e testes automatizados. √â assim que as APIs que a gente usa no dia a dia s√£o constru√≠das.",
        "dataCriacao": "2025-09-28T11:00:00",
        "categoria": "backend",
        "tags": ["nodejs", "express", "mongodb", "rest", "postman"],
        "destaque": true,
        "tempoLeitura": "12 min",
        "imagem": "https://miro.medium.com/v2/resize:fit:1400/1*qniaB3ztqtM-C3WxD3I4Tg.png"
    },
    {
        id: 7,
        titulo: "Flutter: Desenvolvimento Cross-Platform na Pr√°tica",
        resumo: "Como pensar em widgets, estado e navega√ß√£o no Flutter para criar apps nativos para iOS e Android com qualidade.",
        conteudo: `Flutter √© poderoso porque unifica UI e l√≥gica com widgets. Neste post detalho o ciclo de vida de widgets, a diferen√ßa entre Stateless e Stateful, e mostro como estruturar um app escal√°vel: separa√ß√£o entre apresenta√ß√£o, estado e servi√ßos. Apresento estrat√©gias de gerenciamento de estado (Provider, Riverpod, Bloc) e quando escolher cada uma dependendo da complexidade do projeto.

Falo sobre navega√ß√£o, rotas nomeadas, anima√ß√µes simples e integra√ß√£o com recursos nativos (c√¢mera, sensores, plugins). Tamb√©m discuto performance: evitar rebuilds desnecess√°rios, usar const widgets, e profiling com o DevTools do Flutter. Cobro tamb√©m testes: widget tests e integration tests para garantir que as partes cr√≠ticas do app funcionem em diferentes dispositivos.

No final proponho um mini-projeto: construir um app de lista com persist√™ncia local, consumo de API e testes autom√°ticos. √â uma forma pr√°tica de colocar em jogo conceitos de arquitetura e qualidade.`,
        dataCriacao: "2024-03-05T09:15:00",
        categoria: "mobile",
        tags: ["flutter", "dart", "mobile"],
        destaque: false,
        tempoLeitura: "8 min",
        imagem: "assets/images/flutter-app.jpg"
    }
];

export function getPostsByCategory(category) {
    if (category === 'all') return posts;
    return posts.filter(post => post.categoria === category);
}

export function getFeaturedPosts() {
    return posts.filter(post => post.destaque);
}

export function getPostById(id) {
    return posts.find(post => post.id === parseInt(id));
}
